From 50d05304d1a18470d61a3787d5836dfd6d6ef5e0 Mon Sep 17 00:00:00 2001
From: matkiai <101467033+matkiai@users.noreply.github.com>
Date: Tue, 9 Jan 2024 17:13:13 -0500
Subject: [PATCH 6/7] commit

---
 src/App.tsx   | 35 +++++++++++++++++++++--------------
 src/Graph.tsx | 13 +++++++++++--
 2 files changed, 32 insertions(+), 16 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..167737e 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -15,13 +16,14 @@ interface IState {
  * It renders title, button and Graph react element.
  */
 class App extends Component<{}, IState> {
-  constructor(props: {}) {
+ constructor(props: {}) {
     super(props);
 
     this.state = {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if (this.setState.showGraph) {
     return (<Graph data={this.state.data}/>)
+   }
   }
-
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x = 0;
+    const interval = setInterval (() => {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ 
+        data: serverResponds,
+        showGraph: true,
     });
+  });
+  x++
+  if (x > 1000) {
+    clearInterval(interval);
+    }
+  }, 100);
+} 
+  
+  setState(arg0: { data: ServerRespond[]; }) {
+    throw new Error('Method not implemented.');
   }
 
   /**
@@ -53,15 +68,7 @@ class App extends Component<{}, IState> {
           Bank & Merge Co Task 2
         </header>
         <div className="App-content">
-          <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
-            Start Streaming Data
-          </button>
+          <button className="btn btn-primary Stream-button"></button>
           <div className="Graph">
             {this.renderGraph()}
           </div>
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..d8fc6ca 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement  extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem: = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates',
+        {"stock": "distinct count",
+        "top_ask_price": "avg",
+        "top_bid_price": "avg",
+        "timestamp":"distinct count"}');
     }
   }
 
-- 
2.41.0.windows.3

